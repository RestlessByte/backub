import { StatusCodes, ReasonPhrases } from 'http-status-codes';
import { usingOpenAI } from './ai/core/ai';
import { config } from 'dotenv';
import { Telegraf } from 'telegraf';
import { EnumNamesProducts } from './telegram/game/namesProducts';
import { HTMLTagsTelegram } from './telegram/hub/usingAI/systemContext';

config(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

const bot = new Telegraf(process.env.TOKEN!);

interface ReportBugProps {
  message: string | unknown;
  product: EnumNamesProducts;
}

export const ReportBug = async (props: ReportBugProps): Promise<void> => {
  try {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ AI
    const aiResponse = await usingOpenAI({
      user_prompt: `
        –°–æ–æ–±—â–µ–Ω–∏–µ: ${props.message}
        –ö–æ–¥: –°–∞–º –≤—ã—è–≤–∏`,
      system_prompt: `
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
        –£–∫–∞–∂–∏: 
        1. –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        2. –í–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        3. –ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
        4. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω!
        –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π ** –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–≥–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–∏–º —Ç–µ–≥–∞–º - ${HTMLTagsTelegram}`,
      provider: 'MistralAI',
      model: 'mistral-large-latest'
    });

    const content = aiResponse.choices[0].message.content;
    const reportMessage = `üö® –ü—Ä–æ–¥—É–∫—Ç: ${props.product}\n\n${content}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
    await bot.telegram.sendMessage(process.env.CHATID!, reportMessage, { parse_mode: 'HTML' });

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ ReportBug:', error);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const errorMessage = `
      ‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç: ${props.product}
      
      –û–®–ò–ë–ö–ê –í –°–ò–°–¢–ï–ú–ï –û–¢–ß–ï–¢–ù–û–°–¢–ò:
      ${error.code ? `–ö–æ–¥: ${error.code}` : ''}
      –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
    `;

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    try {
      await bot.telegram.sendMessage(process.env.CHATID!, errorMessage);
    } catch (telegramError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram:', telegramError);
    }
  }
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
ReportBug({
  message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤: –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —à—Ç–∞—Ç–Ω–æ. –ü—Ä–∏–¥—É–º–∞–π –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –æ—à–∏–±–∫—É..',
  product: EnumNamesProducts.telegramAIHubBot
});