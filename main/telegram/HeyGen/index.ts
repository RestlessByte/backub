import { config } from 'dotenv';
import { Telegraf, Markup } from 'telegraf';
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–ø–∏—Å–Ω—ã–π API HEYGEN, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ fetch
import database from './db/connection';

config();

// –°–∞–º–æ–ø–∏—Å–Ω—ã–π API HEYGEN, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π fetch –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
class HEYGEN {
  token: string;
  baseUrl: string;

  constructor(token: string) {
    this.token = token;
    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API HEYGEN ‚Äì –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
    this.baseUrl = "https://api.heygen.com";
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
  avatars = {
    list: async (): Promise<any[]> => {
      const response = await fetch(`${this.baseUrl}/avatars`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${this.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤: ${response.statusText}`);
      }
      const data = await response.json();
      return data as any[];
    }
  };
}

const TELEGRAM_TOKEN = process.env.BOT_TOKEN;
if (!TELEGRAM_TOKEN) {
  throw new Error('"BOT_TOKEN" env var is required!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
const getUser = async (userId: number) => {
  const res = await database('hey_gen', "SELECT * FROM users WHERE user_id = $1", [userId]);
  return res.rows[0];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
const updateUser = async (userId: number, fields: object) => {
  const entries = Object.entries(fields);
  const setClause = entries
    .map(([key, _], index) => `${key} = $${index + 2}`)
    .join(', ');
  await database('hey_gen', `UPDATE users SET ${setClause} WHERE user_id = $1`, [
    userId,
    ...entries.map(([, value]) => value),
  ]);
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è buildMainMenu –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î
const buildMainMenu = (user: any) => {
  if (!user.token) {
    // –ï—Å–ª–∏ API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    return Markup.inlineKeyboard([
      [Markup.button.callback('üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω', 'set_token')],
    ]);
  } else {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
    return Markup.inlineKeyboard([
      [
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'),
        Markup.button.callback('üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Reels', 'create_reels')
      ],
      [
        Markup.button.callback('üßë‚Äçü¶∞ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä', 'choose_avatar'),
        Markup.button.callback('üéñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PREMIUM', 'manage_premium')
      ]
    ]);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
const bot = new Telegraf(TELEGRAM_TOKEN);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  let user = await getUser(userId);
  if (!user) {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ë–î
    await database('hey_gen', "INSERT INTO users (user_id) VALUES ($1)", [userId]);
    user = await getUser(userId);
  }

  const welcomeMsg = user.token
    ? `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.from.first_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
    : `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ https://app.heygen.com/ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω.`;
  await ctx.reply(welcomeMsg, buildMainMenu(user));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω"
bot.action('set_token', async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  await updateUser(userId, { trigger_set_token: true });
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('text', async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  let user = await getUser(userId);

  if (user.trigger_set_token) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º API —Ç–æ–∫–µ–Ω –≤ –ë–î
    await updateUser(userId, { token: ctx.message.text, trigger_set_token: false });
    user = await getUser(userId);
    await ctx.reply('–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', buildMainMenu(user));
  } else if (user.trigger_set_reels_text) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Reels
    await updateUser(userId, { reels_text: ctx.message.text, trigger_set_reels_text: false });
    await ctx.reply('–¢–µ–∫—Å—Ç –¥–ª—è Reels —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.', Markup.inlineKeyboard([
      [Markup.button.callback('üßë‚Äçü¶∞ –í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä', 'choose_avatar')]
    ]));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Reels"
bot.action('create_reels', async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  await updateUser(userId, { trigger_set_reels_text: true });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ Reels:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"
bot.action('choose_avatar', async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  const user = await getUser(userId);
  if (!user.token) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω.', Markup.inlineKeyboard([
      [Markup.button.callback('üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω', 'set_token')]
    ]));
    return;
  }

  const heygenInstance = new HEYGEN(user.token);
  const avatars = await heygenInstance.avatars.list();
  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ avatars –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–∞—Å—Å–∏–≤–æ–º
  const avatarArray = Array.isArray(avatars) ? avatars : [avatars];

  const avatarButtons = avatarArray.map((avatar: any) =>
    Markup.button.callback(avatar.avatar_name, `select_avatar_${avatar.avatar_id}`)
  );

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä:', Markup.inlineKeyboard(avatarButtons, { columns: 2 }));
});
