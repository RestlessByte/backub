import { config } from 'dotenv';
import { INSERT } from 'sequelize/lib/query-types';
import { text } from 'stream/consumers';
import { Markup, Telegraf, Context } from 'telegraf';
import { configDotenv } from 'dotenv';
import database from './db/postgresql/connection';

configDotenv();
const bot = new Telegraf(process.env.TOKEN as string);
const ADMIN_ID = parseInt(process.env.ID!); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ

// –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
type MessageType = 'text' | 'photo' | 'document' | 'video' | 'audio' | 'voice' | 'sticker' | 'animation' | 'video_note' | 'location' | 'contact' | 'poll' | 'dice' | 'game' | 'invoice' | 'successful_payment' | 'passport_data' | 'web_app_data' | 'unknown';

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function getMessageType(message: any): { type: MessageType, file_id?: string, content?: string } {
  if (message.text) return { type: 'text', content: message.text };
  if (message.photo) return { type: 'photo', file_id: message.photo[message.photo.length - 1].file_id };
  if (message.document) return { type: 'document', file_id: message.document.file_id, content: message.caption };
  if (message.video) return { type: 'video', file_id: message.video.file_id, content: message.caption };
  if (message.audio) return { type: 'audio', file_id: message.audio.file_id, content: message.caption };
  if (message.voice) return { type: 'voice', file_id: message.voice.file_id };
  if (message.sticker) return { type: 'sticker', file_id: message.sticker.file_id };
  if (message.animation) return { type: 'animation', file_id: message.animation.file_id, content: message.caption };
  if (message.video_note) return { type: 'video_note', file_id: message.video_note.file_id };
  if (message.location) return { type: 'location', content: `–®–∏—Ä–æ—Ç–∞: ${message.location.latitude}, –î–æ–ª–≥–æ—Ç–∞: ${message.location.longitude}` };
  if (message.contact) return { type: 'contact', content: `–ò–º—è: ${message.contact.first_name} ${message.contact.last_name || ''}, –¢–µ–ª–µ—Ñ–æ–Ω: ${message.contact.phone_number}` };
  if (message.poll) return { type: 'poll', content: `–í–æ–ø—Ä–æ—Å: ${message.poll.question}, –í–∞—Ä–∏–∞–Ω—Ç—ã: ${message.poll.options.map((o: any) => o.text).join(', ')}` };
  if (message.dice) return { type: 'dice', content: `–¢–∏–ø –∫—É–±–∏–∫–∞: ${message.dice.emoji}, –ó–Ω–∞—á–µ–Ω–∏–µ: ${message.dice.value}` };
  if (message.game) return { type: 'game', content: `–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ${message.game.title}` };
  if (message.invoice) return { type: 'invoice', content: `–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${message.invoice.title}, –û–ø–∏—Å–∞–Ω–∏–µ: ${message.invoice.description}` };
  if (message.successful_payment) return { type: 'successful_payment', content: `–°—É–º–º–∞: ${message.successful_payment.total_amount / 100} ${message.successful_payment.currency}` };
  if (message.passport_data) return { type: 'passport_data', content: '–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞' };
  if (message.web_app_data) return { type: 'web_app_data', content: `–î–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${message.web_app_data.data}` };
  return { type: 'unknown' };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
bot.action(/^answer:(\d+)$/, async (ctx) => {
  try {
    const userId = ctx.match[1];
    const cobfig = await database('telegram_my_security', `SELECT * FROM config`)
    const config = cobfig.rows[0]
    if (!config) {
      await database('telegram_my_security', `INSERT INTO config (answer_id) VALUES (${userId})`)

    } else if (config) {
      await database('telegram_my_security', `DELETE FROM config`)
      await database('telegram_my_security', `INSERT INTO config (answer_id) VALUES (${userId})`)
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (ctx.from?.id !== ADMIN_ID) {
      return ctx.answerCbQuery('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å');
    } ''
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.editMessageText(
      ctx.callbackQuery.message?.text + '\n\nüü¢ –û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...',
      { reply_markup: null }
    );

    ctx.answerCbQuery('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
bot.on('message', async (ctx: Context) => {

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç
  const config = await database('telegram_my_security', `SELECT * FROM config `)
  const userId = config.rows[0].answer_id
  console.log(userId)
  const messageInfo = getMessageType(ctx.message);
  if (userId && ctx?.from.id === ADMIN_ID) {
    if (messageInfo.type === 'text' && messageInfo.content) {
      await ctx.telegram.sendMessage(userId, `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n${messageInfo.content}`);
    }
    else if (messageInfo.file_id) {
      const caption = `üì® –û—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n${messageInfo.content || ''}`;

      switch (messageInfo.type) {
        case 'photo':
          await ctx.telegram.sendPhoto(userId, messageInfo.file_id, { caption });
          break;
        case 'document':
          await ctx.telegram.sendDocument(userId, messageInfo.file_id, { caption });
          break;
        case 'video':
          await ctx.telegram.sendVideo(userId, messageInfo.file_id, { caption });
          break;
        case 'audio':
          await ctx.telegram.sendAudio(userId, messageInfo.file_id, { caption });
          break;
        case 'voice':
          await ctx.telegram.sendVoice(userId, messageInfo.file_id, { caption });
          break;
        case 'animation':
          await ctx.telegram.sendAnimation(userId, messageInfo.file_id, { caption });
          break;
      }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    await database('telegram_my_security', `DELETE FROM config`)

    return ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!');
  } else if (!ADMIN_ID) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    try {
      if (ctx.message?.text == '/start') {
        return ctx.replyWithHTML(`${ctx.from.first_name} ${ctx.from.last_name || ''}, –≤—ã —Ç—É—Ç —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å <b>@RestlessByte</b>!
    <i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!
    ‚ùó<b>–°—Ç—Ä–æ–≥–æ –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Ç–∞–∫, –Ω–∏–∫–∞–∫–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞. –õ–∏—á–Ω—ã–π —á–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö</b></i>`)
      }
      const messageInfo = getMessageType(ctx.message);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      let adminMessage = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from?.username ? `@${ctx.from.username}` : '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n`;
      adminMessage += `üÜî ID: ${ctx.from?.id}\n`;
      adminMessage += `üë§ –ò–º—è: ${ctx.from?.first_name} ${ctx.from?.last_name || ''}\n`;
      adminMessage += `üåê –Ø–∑—ã–∫: ${ctx.from?.language_code || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      adminMessage += `üåÄ PREMIUM: ${ctx.from?.is_premium ? '‚úîÔ∏è' : `‚ùå`}\n`
      adminMessage += `ü§ñ BOT: ${ctx.from?.is_bot ? '‚úîÔ∏è' : `‚ùå`}\n`
      adminMessage += `üì® –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageInfo.type}\n`;

      if (messageInfo.content) {
        adminMessage += `üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${messageInfo.content.substring(0, 200)}${messageInfo.content.length > 200 ? '...' : ''}`;
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await ctx.telegram.sendMessage(
        ADMIN_ID,
        adminMessage,
        Markup.inlineKeyboard([
          Markup.button.callback(
            `‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å ${ctx.from?.username ? `@${ctx.from.username}` : ''}`,
            `answer:${ctx.from?.id}`
          )
        ])
      );

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const sendOptions = {
        caption: `–û—Ç: ${ctx.from?.username ? `@${ctx.from.username}` : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}\n${messageInfo.content || ''}`
      };

      if (messageInfo.type === 'photo' && messageInfo.file_id) {
        await ctx.telegram.sendPhoto(ADMIN_ID, messageInfo.file_id, sendOptions);
      } else if (messageInfo.type === 'document' && messageInfo.file_id) {
        await ctx.telegram.sendDocument(ADMIN_ID, messageInfo.file_id, sendOptions);
      } else if (messageInfo.type === 'video' && messageInfo.file_id) {
        await ctx.telegram.sendVideo(ADMIN_ID, messageInfo.file_id, sendOptions);
      } else if (messageInfo.type === 'audio' && messageInfo.file_id) {
        await ctx.telegram.sendAudio(ADMIN_ID, messageInfo.file_id, sendOptions);
      } else if (messageInfo.type === 'voice' && messageInfo.file_id) {
        await ctx.telegram.sendVoice(ADMIN_ID, messageInfo.file_id, sendOptions);
      } else if (messageInfo.type === 'sticker' && messageInfo.file_id) {
        await ctx.telegram.sendSticker(ADMIN_ID, messageInfo.file_id);
      } else if (messageInfo.type === 'animation' && messageInfo.file_id) {
        await ctx.telegram.sendAnimation(ADMIN_ID, messageInfo.file_id, sendOptions);
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await database('telegram_my_security', `
      INSERT INTO chat (user_id, text, type, file_id, first_name, last_name, language_code) 
      VALUES ($1, $2, $3, $4, $5, $6, $7)
    `, [
        ctx.from?.id,
        messageInfo.content || null,
        messageInfo.type,
        messageInfo.file_id || null,
        ctx.from?.first_name,
        ctx.from?.last_name || null,
        ctx.from?.language_code || null
      ]);

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      ctx.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch(() => {
  console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  bot.telegram.sendMessage(ADMIN_ID, 'ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));