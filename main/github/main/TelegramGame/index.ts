import database from "../../db/connection"; // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import { configDotenv } from "dotenv";
import { Context, Markup, Telegraf } from "telegraf";
import type { ITelegramGameUsers } from "./types/user/type";
import { TelegramGameFunDonate } from "./fun/donate";
import { TelegramFunGame } from "./fun/game";
import { TelegramFunGameTops } from "./fun/top";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
configDotenv({ path: "../../.env" });

export const TelegramFormatNumber = (number: number): string => {
  if (number === 0) return "0";
  const units = [
    { value: 1e21, name: "‚ôæÔ∏è" }, // —Å–µ–∫—Å–∏–ª–∏–æ–Ω -> –°
    { value: 1e18, name: "–∫–≤–∏–Ω—Ç–∏–ª" }, // –∫–≤–∏–Ω—Ç–∏–ª–ª–∏–æ–Ω -> –ö–≤
    { value: 1e15, name: "–∫–≤–∞–¥" }, // –∫–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω -> –ö–¥
    { value: 1e12, name: "—Ç—Ä–∏–ª" }, // —Ç—Ä–∏–ª–ª–∏–æ–Ω -> –¢
    { value: 1e9, name: "–º–ª—Ä–¥" }, // –º–ª—Ä–¥ -> –ú–ª—Ä–¥ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    { value: 1e6, name: "–º–ª–Ω" }, // –º–ª–Ω -> –ú–ª–Ω (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    { value: 1e3, name: "—Ç—ã—Å" }, // —Ç—ã—Å -> –∫–∫–∫
  ];

  for (const unit of units) {
    if (number >= unit.value) {
      return `${(number / unit.value).toFixed(1)} ${unit.name}`;
    }
  }

  return number.toString();
};

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(process.env.BYTEMIND_GAME_BOT_TOKEN as string);


// FUNCTIONAL START
TelegramGameFunDonate(bot);
TelegramFunGame(bot);
TelegramFunGameTops(bot);
// FUNCTIONAL END

export const TelegramGameMenu = [Markup.button.callback("üé° –ú–µ–Ω—é", "game_menu")];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function isTextMessage(message: any): message is { text: string } {
  return !!message && typeof message.text === "string";
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.command("start", async (ctx) => {
  await TelegramGameParseUserStateToDatabase(ctx);
  ctx.reply(
    `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from?.first_name}!\n\nüéÆ –í—ã –≤–æ—à–ª–∏ –≤ –∏–≥—Ä–æ–≤–æ–π —á–∞—Ç-–±–æ—Ç ${process.env.BYTEMIND_GAME_BOT_USERNAME}.\n
    üôÉ –ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º! - –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä—É–¥–∏–º—Å—è –Ω–∞–¥ –±–æ—Ç–æ–º!`,
    Markup.inlineKeyboard([TelegramGameMenu])
  );
});
// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const TelegramGameParseUserStateToDatabase = async (ctx: Context): Promise<ITelegramGameUsers> => {
  const dbResult = await database("telegram_game", "SELECT * FROM users WHERE user_id = $1", [ctx?.from?.id]);

  if (dbResult.rows.length > 0) {
    let user = dbResult.rows[0] as ITelegramGameUsers;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è friends –∏ pending_requests, –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
    try {
      user.friends = JSON.parse(user.friends as unknown as string);
    } catch (error) {
      user.friends = [];
    }

    try {
      user.pending_requests = JSON.parse(user.pending_requests as unknown as string);
    } catch (error) {
      user.pending_requests = [];
    }

    return user;
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    await database(
      "telegram_game",
      "INSERT INTO users (user_id, username, created_at, balance, games_played, rank, updated_at, friends, pending_requests) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)",
      [ctx?.from?.id, ctx?.from?.username, new Date(), 100, 0, 0, new Date(), '[]', '[]']
    );

    const newUser = await database("telegram_game", "SELECT * FROM users WHERE user_id = $1", [ctx?.from?.id]);
    return newUser.rows[0] as ITelegramGameUsers;
  }
};

// –ì–ª–∞–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é
bot.action("game_menu", async (ctx) => {
  ctx.reply("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", Markup.inlineKeyboard([
    [Markup.button.callback("ü´† –ü—Ä–æ—Ñ–∏–ª—å", "profile")],
    [Markup.button.callback("üéÆ –ò–≥—Ä–∞—Ç—å", "games")],
    [Markup.button.callback("üí∏ –î–æ–Ω–∞—Ç –º–µ–Ω—é", "donate_menu")],
    [Markup.button.callback("üèÜ –†–µ–π—Ç–∏–Ω–≥", "game_leaderboard")],
    [Markup.button.callback("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "game_daily_bonus")],
    [Markup.button.callback("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", "game_shop")],
    [Markup.button.callback("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "game_support")],
    [Markup.button.callback("üë• –î—Ä—É–∑—å—è", "friends_menu")],
  ]));
});
bot.action("profile", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const rank = await database("telegram_game", "SELECT * FROM privilegies WHERE user_id = $1", [ctx.from.id]);
  ctx.reply(`ü´† –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüÜî ID: ${ctx.from.id}\nüß© –£—Ä–æ–≤–µ–Ω—å: ${TelegramFormatNumber(user.level as number)}\nüí≥ –ë–∞–ª–∞–Ω—Å: ${TelegramFormatNumber(user.balance)} üí∞\nüí∏ –ò–≥—Ä–æ–≤–æ–π –¥–æ–Ω–∞—Ç: ${TelegramFormatNumber(user.donate)} ‚ÇΩ\nüèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #${user.rank}\nüëë –ü—Ä–µ–≤–∏–ª–µ–≥–∏—è: ${rank.rows[0] ? rank.rows[0].prefix : "üë§ –ò–≥—Ä–æ–∫"}\nüéÆ –í—Å–µ–≥–æ –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${TelegramFormatNumber(user.games_played)}`,
    Markup.inlineKeyboard([

      [Markup.button.callback("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "game_topup")],
      [Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è", `add_friend_${ctx.from.id}`)],
      [Markup.button.callback("üë• –î—Ä—É–∑—å—è", "friends_menu")],
      TelegramGameMenu

    ]));
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
bot.action("game_daily_bonus", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const lastBonusTime = new Date(user.updated_at).setDate(new Date(user.updated_at).getDate());
  const currentTime = new Date().setDate(new Date().getDate());

  if (currentTime - lastBonusTime > 86400000) {
    await database("telegram_game", "UPDATE users SET balance = balance + 50, updated_at = $1 WHERE user_id = $2", [new Date(), ctx.from.id]);
    ctx.reply("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +50 ‚ÇΩ!", Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "game_menu")]]));
  } else {
    ctx.reply("‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!", Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "game_menu")]]));
  }
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
bot.action("game_support", (ctx) => {
  ctx.reply("üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\nüì± Telegram: @ByteMindSupportBot", Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "game_menu")]]));
});

// –ú–µ–Ω—é –¥—Ä—É–∑–µ–π
bot.action("friends_menu", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const friends = Array.isArray(user.friends) ? user.friends : [];

  const friendList = friends.map((friendId: number) => `@${friendId}`).join(", ");

  ctx.reply(`üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:\n${friendList || "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π."}`, Markup.inlineKeyboard([
    [Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", "add_friend")],
    [Markup.button.callback("üìù –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã", "incoming_requests")],
    [Markup.button.callback("üí∞ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å", "transfer_balance")],
    [Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "game_menu")],
  ]));
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞


// –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
bot.action("incoming_requests", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const pendingRequests = Array.isArray(user.pending_requests) ? user.pending_requests : [];

  if (pendingRequests.length > 0) {
    const requestList = pendingRequests.map((requestId: number) => `@${requestId}`).join(", ");

    ctx.reply(`–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n${requestList}`, Markup.inlineKeyboard([
      [Markup.button.callback("–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ", "accept_all_requests")],
      [Markup.button.callback("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ", "decline_all_requests")],
      [Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "friends_menu")],
    ]));
  } else {
    ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "friends_menu")]]));
  }
});

// –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
bot.action("accept_all_requests", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const pendingRequests = Array.isArray(user.pending_requests) ? user.pending_requests : [];

  if (pendingRequests.length > 0) {
    const updatedFriends = Array.isArray(user.friends) ? user.friends : [];
    updatedFriends.push(...pendingRequests);

    await database(
      "telegram_game",
      "UPDATE users SET friends = $1, pending_requests = '[]' WHERE user_id = $2",
      [JSON.stringify(updatedFriends), user.user_id]
    );

    ctx.reply("–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏–Ω—è—Ç—ã!", Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "friends_menu")]]));
  } else {
    ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "friends_menu")]]));
  }
});

// –ü–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
bot.action("transfer_balance", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const keyboard: any[] = [];
  for (const friendId of user.friends || []) {
    keyboard.push([Markup.button.callback(`üÜî ${friendId}`, `transfer_balance_friend_${friendId}`)])
  }
  ctx.reply(`${user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å:`, Markup.inlineKeyboard(keyboard));
})
bot.action("transfer_balance_friend_", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const friendId = ctx.match[1];
  ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:`, Markup.inlineKeyboard([
    [Markup.button.callback(`${TelegramFormatNumber(user.balance / 1)}üí∞`, `transfer_balance_friend_${friendId}_${user.balance / 1}`), Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", `transfer_balance_friend_${friendId}`)],
    [Markup.button.callback(`${TelegramFormatNumber(user.balance / 2)}üí∞`, `transfer_balance_friend_${friendId}_${user.balance / 2}`), Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", `transfer_balance_friend_${friendId}`)],
    [Markup.button.callback(`${TelegramFormatNumber(user.balance / 3)}üí∞`, `transfer_balance_friend_${friendId}_${user.balance / 3}`), Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", `transfer_balance_friend_${friendId}`)],
    TelegramGameMenu
  ])
  );
});
bot.action("transfer_balance_friend_", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const friendId = ctx.match[1];
  const amount = ctx.match[2];
  ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ${amount} ‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${friendId}?`, Markup.inlineKeyboard([[Markup.button.callback("–î–∞", `transfer_balance_confirm_${friendId}_${amount}`), Markup.button.callback("–ù–µ—Ç", `transfer_balance_friend_${friendId}`)],
  ])
  );
});
bot.action("transfer_balance_confirm_", async (ctx) => {
  const user = await TelegramGameParseUserStateToDatabase(ctx);
  const friendId = ctx.match[1];
  const amount = ctx.match[2];
  ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ ${TelegramFormatNumber(parseInt(amount))} üí∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${friendId}.`, Markup.inlineKeyboard([[Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "friends_menu")]]));
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("Telegram game bot started!");