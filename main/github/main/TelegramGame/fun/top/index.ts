import { Markup, Telegraf } from "telegraf";
import { TelegramFormatNumber } from "../..";
import database from "../../../../db/connection";
export const TelegramFunGameTops = (bot: Telegraf) => {
  bot.action("game_leaderboard", async (ctx) => {
    showLeaderboard(ctx, 1); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });
  const getLeaderboardPage = async (page: number = 1, pageSize: number = 10): Promise<{ users: any[]; totalPages: number }> => {
    const offset = (page - 1) * pageSize;

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsersResult = await database("telegram_game", "SELECT COUNT(*) as count FROM users");
    const totalUsers = parseInt(totalUsersResult.rows[0].count);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const usersResult = await database("telegram_game", "SELECT * FROM users ORDER BY balance DESC LIMIT $1 OFFSET $2", [pageSize, offset]);
    const users = usersResult.rows;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const totalPages = Math.ceil(totalUsers / pageSize);

    return { users, totalPages };
  };
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã leaderboard
  const showLeaderboard = async (ctx: any, page: number) => {
    const pageSize = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const { users, totalPages } = await getLeaderboardPage(page, pageSize);

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (page < 1 || page > totalPages) {
      return showLeaderboard(ctx, totalPages);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    let message = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤:\n\n";
    let rank = (page - 1) * pageSize + 1; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    users.forEach((user: any) => {
      const formattedBalance = TelegramFormatNumber(user.balance);
      message += `${rank}. ${user.username || "–ê–Ω–æ–Ω–∏–º"} - ${formattedBalance} üí∞\n`;
      rank++;
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const keyboard = [];
    if (page > 1) {
      keyboard.push(Markup.button.callback("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", `leaderboard_page_${page - 1}`));
    }
    if (page < totalPages) {
      keyboard.push(Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", `leaderboard_page_${page + 1}`));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push(Markup.button.callback("‚Üê –ù–∞–∑–∞–¥", "game_menu"));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    ctx.reply(message, Markup.inlineKeyboard([keyboard]));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ leaderboard
  bot.action(/leaderboard_page_\d+/, async (ctx) => {
    const targetPage = parseInt(ctx.match[0].split("_")[2]); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    showLeaderboard(ctx, targetPage);
  });
}